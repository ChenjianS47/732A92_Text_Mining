y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red')
line(x,y_c,col = 'blue')
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x < 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
y_t <- unlist(lapply(x, cost_train))
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red')
line(x,y_c)
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x < 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
y_t <- unlist(lapply(x, cost_train))
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red')
lines(x,y_c,col = 'blue')
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x < 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- seq(0,90,by=1)
y_t <- unlist(lapply(x, cost_train))
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red')
lines(x,y_c,col = 'blue')
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x < 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
# x <- seq(0,90,by=1)
y_t <- unlist(lapply(x, cost_train))
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red')
lines(x,y_c,col = 'blue')
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x < 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
# x <- seq(0,90,by=1)
y_t <- unlist(lapply(x, cost_train),xlabel = 'x',ylabel='EL(x)')
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red')
lines(x,y_c,col = 'blue')
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x < 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
# x <- seq(0,90,by=1)
y_t <- unlist(lapply(x, cost_train),xlab = 'x',ylab='EL(x)')
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red')
lines(x,y_c,col = 'blue')
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x < 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
# x <- seq(0,90,by=1)
y_t <- unlist(lapply(x, cost_train))
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red',xlab = 'x',ylab='EL(x)')
lines(x,y_c,col = 'blue')
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x <= 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
# x <- seq(0,90,by=1)
y_t <- unlist(lapply(x, cost_train))
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red',xlab = 'x',ylab='EL(x)')
lines(x,y_c,col = 'blue')
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x <= 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
# x <- seq(0,90,by=1)
y_t <- unlist(lapply(x, cost_train))
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red',xlab = 'x',ylab='EL(x)')
lines(x,y_c,col = 'blue')
legend(1, 95, legend=c("Cost of train", "Cost of car"),
col=c("red", "blue"), lty=1:2, cex=0.8)
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x <= 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
# x <- seq(0,90,by=1)
y_t <- unlist(lapply(x, cost_train))
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red',xlab = 'x',ylab='EL(x)')
lines(x,y_c,col = 'blue')
legend(300, 95, legend=c("Cost of train", "Cost of car"),
col=c("red", "blue"), lty=1:2, cex=0.8)
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x <= 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
# x <- seq(0,90,by=1)
y_t <- unlist(lapply(x, cost_train))
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red',xlab = 'x',ylab='EL(x)')
lines(x,y_c,col = 'blue')
legend(30, 95, legend=c("Cost of train", "Cost of car"),
col=c("red", "blue"), lty=1:2, cex=0.8)
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x <= 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
# x <- seq(0,90,by=1)
y_t <- unlist(lapply(x, cost_train))
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red',xlab = 'x',ylab='EL(x)')
lines(x,y_c,col = 'blue')
legend(0, 300, legend=c("Cost of train", "Cost of car"),
col=c("red", "blue"), lty=1:2, cex=0.8)
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x <= 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
# x <- seq(0,90,by=1)
y_t <- unlist(lapply(x, cost_train))
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red',xlab = 'x',ylab='EL(x)')
lines(x,y_c,col = 'blue')
legend(0, 350, legend=c("Cost of train", "Cost of car"),
col=c("red", "blue"), lty=1:2, cex=0.8)
cost_train <- function(x){
if(x <= 30){
t = 50
} else if (30 < x & x <= 45){
t = 50 + (45-x)*0.001*300
} else {
t = 50 + 300
}
return(t)
}
cost_car <- function(x){
if(x <= 60){
t = 70 + (0.01)*300
}else{
t = 70 + ((90-x)*0.001+0.01)*300
}
return(t)
}
x <- c(0,15,30,35,40,45,60,75,90)
# x <- seq(0,90,by=1)
y_t <- unlist(lapply(x, cost_train))
y_c <- unlist(lapply(x, cost_car))
plot(x,y_t,type = 'l', col = 'red',xlab = 'x',ylab='EL(x)')
lines(x,y_c,col = 'blue')
legend(0, 350, legend=c("Cost of train", "Cost of car"),
col=c("red", "blue"), lty=1:1, cex=0.8)
# Clear the environment
rm(list=ls())
# Library the relative package
library(config)
library(htmlwidgets)
# Library the function for process the data file
source('./Core/read_data_file.R')
# Setting the time language to English
Sys.setlocale("LC_TIME","english")
# Setting the character type to Swedish
Sys.setlocale("LC_CTYPE","swedish")
# Load the relative config of the data sheet in the excel file.
config <- config::get(file = "config.yml")
# Generate the date sequence
time <- seq.Date(from = as.Date(unlist(config['start_time']),format = "%Y/%m/%d"),
to = as.Date(unlist(config['end_time']),format = "%Y/%m/%d"),
by = "1 day")
# Generate the file path of the data
file_add <- paste(paste(unlist(config['file_add_and_name']),
format(time, format="%b %d %Y"),
sep=''), config['file_type'],sep='')
# Initialize the list for storing the names of plots
fig_f <- list()
col_name <- list()
print(paste('Processing',file_add[1]))
# Read the first file
read_data_file(file_add[1],file_stats = 'first')
# Read the other files
for (t in file_add[-1]){
print(paste('Processing',t))
if (file.exists(t)== TRUE){
read_data_file(file_add = t,file_stats='others')
}else{
print(paste(t,' does not exist, continue to next file'))
}
}
# Save the plot as the html
print('Start to plot the data and save as .html file')
for (i in fig_f){
p <- eval(as.symbol(i))
saveWidget(as_widget(p), paste(i,'.html',sep=''))
}
print('Finished')
# Clear the environment
rm(list=ls())
# Library the relative package
library(config)
library(htmlwidgets)
# Library the function for process the data file
source('./Core/read_data_file.R')
# Setting the time language to English
Sys.setlocale("LC_TIME","english")
# Setting the character type to Swedish
Sys.setlocale("LC_CTYPE","swedish")
# Load the relative config of the data sheet in the excel file.
config <- config::get(file = "config.yml")
# Generate the date sequence
time <- seq.Date(from = as.Date(unlist(config['start_time']),format = "%Y/%m/%d"),
to = as.Date(unlist(config['end_time']),format = "%Y/%m/%d"),
by = "1 day")
# Generate the file path of the data
file_add <- paste(paste(unlist(config['file_add_and_name']),
format(time, format="%b %d %Y"),
sep=''), config['file_type'],sep='')
# Initialize the list for storing the names of plots
fig_f <- list()
col_name <- list()
print(paste('Processing',file_add[1]))
# Read the first file
read_data_file(file_add[1],file_stats = 'first')
# Read the other files
for (t in file_add[-1]){
print(paste('Processing',t))
if (file.exists(t)== TRUE){
read_data_file(file_add = t,file_stats='others')
}else{
print(paste(t,' does not exist, continue to next file'))
}
}
# Save the plot as the html
print('Start to plot the data and save as .html file')
for (i in fig_f){
p <- eval(as.symbol(i))
saveWidget(as_widget(p), paste(i,'.html',sep=''))
}
print('Finished')
# Clear the environment
rm(list=ls())
# Library the relative package
library(config)
library(htmlwidgets)
# Library the function for process the data file
source('./Core/read_data_file.R')
# Setting the time language to English
Sys.setlocale("LC_TIME","english")
# Setting the character type to Swedish
Sys.setlocale("LC_CTYPE","swedish")
# Load the relative config of the data sheet in the excel file.
config <- config::get(file = "config.yml")
# Generate the date sequence
time <- seq.Date(from = as.Date(unlist(config['start_time']),format = "%Y/%m/%d"),
to = as.Date(unlist(config['end_time']),format = "%Y/%m/%d"),
by = "1 day")
# Generate the file path of the data
file_add <- paste(paste(unlist(config['file_add_and_name']),
format(time, format="%b %d %Y"),
sep=''), config['file_type'],sep='')
# Initialize the list for storing the names of plots
fig_f <- list()
col_name <- list()
print(paste('Processing',file_add[1]))
# Read the first file
read_data_file(file_add[1],file_stats = 'first')
# Read the other files
for (t in file_add[-1]){
print(paste('Processing',t))
if (file.exists(t)== TRUE){
read_data_file(file_add = t,file_stats='others')
}else{
print(paste(t,' does not exist, continue to next file'))
}
}
# Save the plot as the html
print('Start to plot the data and save as .html file')
for (i in fig_f){
p <- eval(as.symbol(i))
saveWidget(as_widget(p), paste(i,'.html',sep=''))
}
print('Finished')
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
import numpy as np
n
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.model_selection
data = pd.read_excel('data_38k_us.xlsx')
data
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.model_selection
pd.set_option('display.max_columns', None)
data = pd.read_excel('data_38k_us.xlsx')
data
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.model_selection
pd.set_option('display.max_columns', None)
pd.set_option('max_colwidth', 400)
data = pd.read_excel('data_38k_us.xlsx')
data
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.model_selection
pd.set_option('display.max_columns', None)
pd.set_option('max_colwidth', 30)
data = pd.read_excel('data_38k_us.xlsx')
data
pandoc --version
setwd("C:/Users/ShiCJ/Desktop/732A92/Projects")
